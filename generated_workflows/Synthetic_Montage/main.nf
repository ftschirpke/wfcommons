
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()

List<String> extractTaskIDforFile(Path filepath, String task_name) {
  String filename = filepath as String
  filename = filename[filename.lastIndexOf('/')+1..-1]

  List<String> ids_for_file = new ArrayList<String>()
  for (destination : file_inputs[filename]) {
    def destination_task_name = destination[0]
    def destination_task_id = destination[1]
    if (destination_task_name == task_name)
      ids_for_file.add(destination_task_id)
  }
  return ids_for_file
}

// define amount of input files for abstracts tasks where the amount is not constant
def mDiffFit_input_amounts = [
  "00000017": 3,
  "00000018": 3,
  "00000019": 3,
  "00000020": 3,
  "00000021": 3,
  "00000022": 3,
  "00000023": 4,
  "00000024": 3,
  "00000025": 3,
  "00000026": 3,
  "00000027": 3,
  "00000028": 3,
  "00000029": 3,
  "00000030": 3,
  "00000031": 3,
  "00000032": 3,
  "00000033": 3,
  "00000034": 4,
  "00000035": 4,
  "00000036": 3,
  "00000037": 3,
  "00000038": 3,
  "00000039": 3,
  "00000040": 3,
  "00000041": 3,
  "00000042": 3,
  "00000043": 3,
  "00000044": 3,
  "00000045": 3,
  "00000046": 4,
  "00000047": 3,
  "00000048": 3,
  "00000049": 3,
  "00000050": 3,
  "00000051": 3,
  "00000052": 3,
  "00000053": 4,
  "00000054": 3,
  "00000055": 3,
  "00000056": 3,
  "00000057": 3,
  "00000058": 3,
  "00000059": 3,
  "00000060": 3,
  "00000061": 3,
  "00000062": 3,
  "00000063": 3,
  "00000064": 3,
  "00000065": 3,
  "00000066": 3,
  "00000067": 3,
  "00000068": 3,
  "00000069": 3,
  "00000070": 3,
  "00000071": 3,
  "00000072": 3,
  "00000073": 3,
  "00000074": 3,
  "00000075": 3,
  "00000076": 3,
  "00000077": 3,
  "00000078": 3,
  "00000079": 4,
  "00000080": 4,
  "00000081": 3,
  "00000082": 3,
  "00000120": 3,
  "00000121": 4,
  "00000122": 3,
  "00000123": 3,
  "00000124": 3,
  "00000125": 3,
  "00000126": 3,
  "00000127": 3,
  "00000128": 3,
  "00000129": 4,
  "00000130": 3,
  "00000131": 3,
  "00000132": 3,
  "00000133": 3,
  "00000134": 3,
  "00000135": 3,
  "00000136": 3,
  "00000137": 3,
  "00000138": 3,
  "00000139": 3,
  "00000140": 3,
  "00000141": 3,
  "00000142": 3,
  "00000143": 4,
  "00000144": 3,
  "00000145": 4,
  "00000146": 3,
  "00000147": 3,
  "00000148": 3,
  "00000149": 3,
  "00000150": 3,
  "00000151": 3,
  "00000152": 3,
  "00000153": 3,
  "00000154": 3,
  "00000155": 3,
  "00000156": 3,
  "00000157": 3,
  "00000158": 3,
  "00000159": 3,
  "00000160": 3,
  "00000161": 3,
  "00000162": 3,
  "00000163": 4,
  "00000164": 3,
  "00000165": 4,
  "00000166": 3,
  "00000167": 4,
  "00000168": 3,
  "00000169": 3,
  "00000170": 3,
  "00000171": 3,
  "00000172": 3,
  "00000173": 3,
  "00000174": 3,
  "00000175": 3,
  "00000176": 3,
  "00000177": 3,
  "00000178": 3,
  "00000179": 3,
  "00000180": 3,
  "00000181": 3,
  "00000182": 3,
  "00000183": 3,
  "00000184": 3,
  "00000185": 3,
  "00000223": 3,
  "00000224": 3,
  "00000225": 3,
  "00000226": 3,
  "00000227": 3,
  "00000228": 3,
  "00000229": 3,
  "00000230": 3,
  "00000231": 3,
  "00000232": 3,
  "00000233": 3,
  "00000234": 3,
  "00000235": 3,
  "00000236": 3,
  "00000237": 3,
  "00000238": 3,
  "00000239": 3,
  "00000240": 3,
  "00000241": 3,
  "00000242": 3,
  "00000243": 3,
  "00000244": 3,
  "00000245": 4,
  "00000246": 3,
  "00000247": 5,
  "00000248": 5,
  "00000249": 3,
  "00000250": 3,
  "00000251": 3,
  "00000252": 3,
  "00000253": 3,
  "00000254": 3,
  "00000255": 3,
  "00000256": 3,
  "00000257": 3,
  "00000258": 5,
  "00000259": 4,
  "00000260": 3,
  "00000261": 3,
  "00000262": 5,
  "00000263": 5,
  "00000264": 3,
  "00000265": 3,
  "00000266": 3,
  "00000267": 3,
  "00000268": 3,
  "00000269": 3,
  "00000270": 3,
  "00000271": 3,
  "00000272": 3,
  "00000273": 3,
  "00000274": 3,
  "00000275": 4,
  "00000276": 4,
  "00000277": 4,
  "00000278": 3,
  "00000279": 3,
  "00000280": 3,
  "00000281": 3,
  "00000282": 3,
  "00000283": 3,
  "00000284": 3,
  "00000285": 3,
  "00000286": 4,
  "00000287": 3,
  "00000288": 5,
  "00000311": 7,
  "00000312": 8,
  "00000315": 8,
  "00000316": 8,
  "00000317": 3,
  "00000319": 7,
  "00000320": 8,
  "00000321": 3,
  "00000323": 6,
  "00000325": 7,
  "00000327": 3,
  "00000328": 3,
  "00000329": 3,
  "00000330": 8,
  "00000332": 3,
  "00000334": 3,
  "00000335": 6,
  "00000336": 6,
  "00000337": 7,
  "00000338": 6,
  "00000339": 3,
  "00000340": 7,
  "00000341": 3,
  "00000343": 6,
  "00000345": 3,
  "00000346": 3,
  "00000347": 3,
  "00000348": 3,
  "00000349": 3,
  "00000350": 3,
  "00000351": 3,
  "00000352": 3,
  "00000353": 3,
  "00000354": 3,
  "00000355": 3,
  "00000356": 3,
  "00000357": 3,
  "00000358": 3,
  "00000361": 3,
  "00000363": 3,
  "00000365": 3,
  "00000366": 3,
  "00000367": 3,
  "00000368": 3,
  "00000369": 3,
  "00000370": 3,
  "00000371": 3,
  "00000373": 3,
  "00000374": 3,
  "00000375": 3,
  "00000377": 3,
  "00000378": 3,
  "00000380": 3,
  "00000382": 3,
  "00000383": 3,
  "00000385": 3,
  "00000386": 3,
  "00000388": 3,
  "00000389": 3,
  "00000391": 3,
  "00000393": 3,
  "00000394": 3,
  "00000395": 3,
  "00000397": 3,
  "00000399": 3,
  "00000402": 3,
  "00000404": 3,
  "00000405": 3,
  "00000406": 3,
  "00000411": 3,
  "00000414": 3,
  "00000415": 3,
  "00000416": 3,
  "00000418": 3,
  "00000419": 3,
  "00000422": 3,
  "00000424": 3,
  "00000426": 3,
  "00000430": 3,
  "00000432": 3,
  "00000434": 3,
  "00000435": 3,
  "00000436": 3,
  "00000437": 3,
  "00000439": 3,
  "00000440": 3,
  "00000442": 3,
  "00000443": 3,
  "00000444": 3,
  "00000445": 3,
  "00000446": 3,
  "00000449": 3,
  "00000451": 6,
  "00000453": 3,
  "00000457": 3,
  "00000458": 3,
  "00000459": 7,
  "00000460": 7,
  "00000461": 3,
  "00000462": 3,
  "00000463": 7,
  "00000464": 6,
  "00000466": 3,
  "00000467": 3,
  "00000468": 3,
  "00000469": 6,
  "00000470": 6,
  "00000471": 6,
  "00000472": 8,
  "00000474": 6,
  "00000475": 6,
  "00000477": 7,
  "00000478": 3,
  "00000480": 3,
  "00000481": 3,
  "00000482": 3,
  "00000483": 3,
  "00000485": 3,
  "00000487": 3,
  "00000488": 6,
  "00000489": 6,
  "00000490": 3,
  "00000492": 6,
  "00000493": 6,
  "00000494": 3,
  "00000495": 6,
  "00000496": 7,
  "00000497": 7,
  "00000498": 3,
  "00000502": 6,
  "00000504": 3,
  "00000505": 7,
  "00000506": 3,
  "00000507": 3,
  "00000508": 3,
  "00000509": 3,
  "00000510": 3,
  "00000513": 3,
  "00000515": 3,
  "00000516": 3,
  "00000518": 3,
  "00000520": 3,
  "00000521": 3,
  "00000524": 3,
  "00000526": 3,
  "00000527": 3,
  "00000528": 3,
  "00000529": 3,
  "00000530": 3,
  "00000532": 3,
  "00000533": 3,
  "00000534": 3,
  "00000536": 3,
  "00000538": 3,
  "00000539": 3,
  "00000541": 3,
  "00000544": 3,
  "00000545": 3,
  "00000546": 3,
  "00000547": 3,
  "00000548": 3,
  "00000549": 3,
  "00000550": 3,
  "00000551": 3,
  "00000556": 3,
  "00000557": 3,
  "00000558": 3,
  "00000559": 3,
  "00000560": 3,
  "00000561": 3,
  "00000562": 3,
  "00000563": 3,
  "00000564": 3,
  "00000565": 3,
  "00000566": 3,
  "00000568": 3,
  "00000569": 3,
  "00000570": 3,
  "00000571": 3,
  "00000573": 3,
  "00000574": 3,
  "00000575": 3,
  "00000577": 3,
  "00000579": 3,
  "00000580": 3,
  "00000583": 3,
  "00000585": 3,
  "00000588": 3,
  "00000589": 3,
  "00000590": 3,
  "00000595": 3,
  "00000597": 3,
  "00000598": 3,
  "00000599": 3,
  "00000601": 3,
  "00000604": 3,
  "00000605": 3,
  "00000608": 3,
  "00000609": 3,
  "00000610": 3,
  "00000611": 3,
  "00000612": 3,
  "00000613": 3,
  "00000616": 3,
  "00000617": 4,
  "00000618": 3,
  "00000620": 3,
  "00000623": 3,
  "00000625": 3,
  "00000626": 3,
  "00000627": 3,
  "00000628": 3,
  "00000630": 3,
  "00000631": 3,
  "00000633": 3,
  "00000635": 3,
  "00000637": 3,
  "00000639": 3,
  "00000640": 3,
  "00000642": 3,
  "00000644": 3,
  "00000645": 4,
  "00000646": 3,
  "00000647": 3,
  "00000649": 3,
  "00000650": 3,
  "00000651": 3,
  "00000653": 4,
  "00000655": 5,
  "00000657": 3,
  "00000658": 3,
  "00000660": 3,
  "00000662": 3,
  "00000665": 3,
  "00000667": 3,
  "00000669": 3,
  "00000671": 3,
  "00000672": 4,
  "00000673": 3,
  "00000674": 3,
  "00000675": 3,
  "00000676": 3,
  "00000677": 3,
  "00000678": 3,
  "00000679": 4,
  "00000680": 3,
  "00000683": 3,
  "00000685": 3,
  "00000690": 3,
  "00000693": 3,
  "00000694": 3,
  "00000695": 3,
  "00000696": 3,
  "00000697": 3,
  "00000698": 3,
  "00000699": 3,
  "00000700": 3,
  "00000701": 3,
  "00000703": 4,
  "00000704": 3,
  "00000705": 3,
  "00000709": 3,
  "00000710": 3,
  "00000711": 4,
  "00000712": 6,
  "00000713": 5,
  "00000715": 5,
  "00000716": 6,
  "00000717": 6,
  "00000718": 6,
  "00000719": 6,
  "00000721": 5,
  "00000722": 6,
  "00000723": 3,
  "00000724": 3,
  "00000725": 3,
  "00000726": 3,
  "00000727": 3,
  "00000728": 3,
  "00000729": 3,
  "00000730": 3,
  "00000731": 3,
  "00000732": 3,
  "00000733": 3,
  "00000734": 3,
  "00000735": 3,
  "00000738": 3,
  "00000740": 3,
  "00000742": 3,
  "00000743": 3,
  "00000744": 3,
  "00000745": 3,
  "00000746": 3,
  "00000747": 3,
  "00000748": 3,
  "00000750": 3,
  "00000751": 3,
  "00000752": 3,
  "00000754": 3,
  "00000755": 3,
  "00000757": 3,
  "00000759": 3,
  "00000760": 3,
  "00000762": 3,
  "00000763": 3,
  "00000765": 3,
  "00000766": 3,
  "00000768": 3,
  "00000770": 3,
  "00000771": 3,
  "00000772": 3,
  "00000774": 3,
  "00000776": 3,
  "00000779": 3,
  "00000781": 3,
  "00000782": 3,
  "00000783": 3,
  "00000788": 3,
  "00000791": 3,
  "00000792": 3,
  "00000793": 3,
  "00000795": 3,
  "00000796": 3,
  "00000799": 3,
  "00000801": 3,
  "00000803": 3,
  "00000807": 3,
  "00000809": 3,
  "00000811": 3,
  "00000812": 3,
  "00000813": 3,
  "00000814": 3,
  "00000816": 3,
  "00000817": 3,
  "00000819": 3,
  "00000820": 3,
  "00000821": 3,
  "00000822": 3,
  "00000823": 3,
  "00000826": 3,
  "00000827": 3,
  "00000828": 3,
  "00000829": 3,
  "00000830": 3,
  "00000833": 3,
  "00000835": 3,
  "00000836": 3,
  "00000838": 3,
  "00000840": 3,
  "00000841": 3,
  "00000844": 3,
  "00000846": 3,
  "00000847": 3,
  "00000848": 3,
  "00000849": 3,
  "00000850": 3,
  "00000852": 3,
  "00000853": 3,
  "00000854": 3,
  "00000856": 3,
  "00000858": 3,
  "00000859": 3,
  "00000861": 3,
  "00000864": 3,
  "00000865": 3,
  "00000866": 3,
  "00000867": 3,
  "00000868": 3,
  "00000869": 3,
  "00000870": 3,
  "00000871": 3,
  "00000876": 3,
  "00000877": 3,
  "00000878": 3,
  "00000879": 3,
  "00000880": 3,
  "00000881": 3,
  "00000882": 3,
  "00000883": 3,
  "00000884": 3,
  "00000885": 3,
  "00000886": 3,
  "00000888": 3,
  "00000889": 3,
  "00000890": 3,
  "00000891": 3,
  "00000893": 3,
  "00000894": 3,
  "00000895": 3,
  "00000897": 3,
  "00000899": 3,
  "00000900": 3,
  "00000903": 3,
  "00000905": 3,
  "00000908": 3,
  "00000909": 3,
  "00000910": 3,
  "00000915": 3,
  "00000917": 3,
  "00000918": 3,
  "00000919": 3,
  "00000921": 3,
  "00000924": 3,
  "00000925": 3,
  "00000928": 3,
  "00000929": 5,
  "00000932": 3,
  "00000936": 3,
  "00000937": 3,
  "00000939": 3,
  "00000940": 3,
  "00000941": 3,
  "00000943": 5,
  "00000944": 3,
  "00000945": 3,
  "00000946": 5,
  "00000947": 4,
  "00000949": 5,
  "00000951": 3,
  "00000952": 5,
  "00000954": 3,
  "00000955": 3,
  "00000956": 3,
  "00000958": 3,
  "00000960": 3,
  "00000962": 3,
  "00000963": 5,
  "00000964": 5,
  "00000965": 5,
  "00000966": 5,
  "00000967": 5,
  "00000968": 3,
  "00000969": 5,
  "00000970": 3,
  "00000971": 4,
  "00000974": 6,
  "00000975": 5,
  "00000976": 5,
  "00000977": 5,
  "00000979": 3,
  "00000980": 7,
  "00000981": 3,
  "00000982": 3,
  "00000983": 3,
  "00000984": 3,
  "00000985": 3,
  "00000988": 3,
  "00000990": 3,
  "00000991": 3,
  "00000993": 3,
  "00000995": 3,
  "00000996": 3,
  "00000999": 3,
  "00001001": 3,
  "00001002": 3,
  "00001003": 3,
  "00001004": 3,
  "00001005": 3,
  "00001007": 3,
  "00001008": 3,
  "00001009": 3,
  "00001011": 3,
  "00001013": 3,
  "00001014": 3,
  "00001016": 3,
  "00001019": 3,
  "00001020": 3,
  "00001021": 3,
  "00001022": 3,
  "00001023": 3,
  "00001024": 3,
  "00001025": 3,
  "00001026": 3,
  "00001031": 3,
  "00001032": 3,
  "00001033": 3,
  "00001034": 3,
  "00001035": 3,
  "00001036": 3,
  "00001037": 3,
  "00001038": 3,
  "00001039": 3,
  "00001040": 3,
  "00001041": 3,
  "00001043": 3,
  "00001044": 3,
  "00001045": 3,
  "00001046": 3,
  "00001048": 3,
  "00001049": 3,
  "00001050": 3,
  "00001052": 3,
  "00001054": 3,
  "00001055": 3,
  "00001058": 3,
  "00001060": 3,
  "00001063": 3,
  "00001064": 3,
  "00001065": 3,
  "00001070": 3,
  "00001072": 3,
  "00001073": 3,
  "00001074": 3,
  "00001076": 3,
  "00001079": 3,
  "00001080": 3,
  "00001083": 3,
  "00001084": 3,
  "00001085": 3,
  "00001086": 4,
  "00001088": 3,
  "00001089": 3,
  "00001090": 3,
  "00001092": 4,
  "00001094": 3,
  "00001095": 3,
  "00001096": 3,
  "00001097": 3,
  "00001099": 3,
  "00001100": 3,
  "00001101": 3,
  "00001102": 4,
  "00001103": 3,
  "00001105": 3,
  "00001106": 3,
  "00001107": 3,
  "00001109": 3,
  "00001110": 3,
  "00001112": 3,
  "00001113": 3,
  "00001114": 3,
  "00001115": 4,
  "00001118": 3,
  "00001120": 3,
  "00001121": 3,
  "00001122": 3,
  "00001123": 3,
  "00001124": 3,
  "00001125": 3,
  "00001126": 3,
  "00001127": 3,
  "00001128": 3,
  "00001129": 3,
  "00001130": 3,
  "00001131": 3,
  "00001132": 3,
  "00001133": 3,
  "00001134": 3,
  "00001137": 3,
  "00001139": 3,
  "00001141": 3,
  "00001142": 3,
  "00001143": 3,
  "00001144": 3,
  "00001145": 3,
  "00001146": 3,
  "00001147": 3,
  "00001149": 3,
  "00001150": 3,
  "00001151": 3,
  "00001153": 3,
  "00001154": 3,
  "00001156": 3,
  "00001158": 3,
  "00001159": 3,
  "00001161": 3,
  "00001162": 3,
  "00001164": 3,
  "00001165": 3,
  "00001167": 3,
  "00001169": 3,
  "00001170": 3,
  "00001171": 3,
  "00001173": 3,
  "00001175": 3,
  "00001178": 3,
  "00001180": 3,
  "00001181": 3,
  "00001182": 3,
  "00001187": 3,
  "00001190": 3,
  "00001191": 3,
  "00001192": 3,
  "00001194": 3,
  "00001195": 3,
  "00001198": 3,
  "00001200": 3,
  "00001202": 3,
  "00001206": 3,
  "00001208": 3,
  "00001210": 3,
  "00001211": 3,
  "00001212": 3,
  "00001213": 3,
  "00001215": 3,
  "00001216": 3,
  "00001218": 3,
  "00001219": 3,
  "00001220": 3,
  "00001221": 3,
  "00001222": 3,
  "00001225": 3,
  "00001226": 4,
  "00001227": 3,
  "00001228": 3,
  "00001229": 3,
  "00001232": 3,
  "00001233": 5,
  "00001234": 3,
  "00001236": 3,
  "00001239": 3,
  "00001241": 3,
  "00001242": 3,
  "00001243": 3,
  "00001244": 4,
  "00001246": 3,
  "00001247": 3,
  "00001249": 3,
  "00001251": 3,
  "00001253": 3,
  "00001255": 3,
  "00001256": 3,
  "00001258": 3,
  "00001260": 3,
  "00001261": 5,
  "00001262": 3,
  "00001263": 3,
  "00001265": 3,
  "00001266": 3,
  "00001267": 3,
  "00001269": 5,
  "00001271": 5,
  "00001273": 3,
  "00001274": 3,
  "00001276": 3,
  "00001278": 3,
  "00001281": 3,
  "00001283": 3,
  "00001285": 3,
  "00001287": 3,
  "00001288": 5,
  "00001289": 3,
  "00001290": 3,
  "00001291": 3,
  "00001292": 3,
  "00001293": 3,
  "00001294": 3,
  "00001295": 4,
  "00001296": 3,
  "00001299": 3,
  "00001301": 3,
  "00001306": 3,
  "00001309": 3,
  "00001310": 3,
  "00001311": 3,
  "00001312": 3,
  "00001313": 3,
  "00001314": 3,
  "00001315": 3,
  "00001316": 3,
  "00001317": 4,
  "00001319": 4,
  "00001320": 3,
  "00001321": 3,
  "00001325": 4,
  "00001326": 3,
  "00001327": 5,
  "00001328": 3,
  "00001329": 4,
  "00001330": 3,
  "00001331": 3,
  "00001332": 3,
  "00001335": 3,
  "00001336": 5,
  "00001337": 3,
  "00001339": 3,
  "00001342": 3,
  "00001344": 3,
  "00001345": 3,
  "00001346": 3,
  "00001347": 4,
  "00001349": 3,
  "00001350": 3,
  "00001352": 3,
  "00001354": 3,
  "00001356": 3,
  "00001358": 3,
  "00001359": 3,
  "00001361": 3,
  "00001363": 3,
  "00001364": 5,
  "00001365": 3,
  "00001366": 3,
  "00001368": 3,
  "00001369": 3,
  "00001370": 3,
  "00001372": 5,
  "00001374": 5,
  "00001376": 3,
  "00001377": 3,
  "00001379": 3,
  "00001381": 3,
  "00001384": 3,
  "00001386": 3,
  "00001388": 3,
  "00001390": 3,
  "00001391": 5,
  "00001392": 3,
  "00001393": 3,
  "00001394": 3,
  "00001395": 3,
  "00001396": 3,
  "00001397": 3,
  "00001398": 4,
  "00001399": 3,
  "00001402": 3,
  "00001404": 3,
  "00001409": 3,
  "00001412": 3,
  "00001413": 3,
  "00001414": 3,
  "00001415": 3,
  "00001416": 3,
  "00001417": 3,
  "00001418": 3,
  "00001419": 3,
  "00001420": 4,
  "00001422": 4,
  "00001423": 3,
  "00001424": 3,
  "00001428": 4,
  "00001429": 3,
  "00001430": 5,
  "00001431": 3,
  "00001432": 3,
  "00001435": 3,
  "00001436": 3,
  "00001437": 3,
  "00001439": 3,
  "00001441": 3,
  "00001442": 3,
  "00001443": 3,
  "00001444": 3,
  "00001445": 3,
  "00001446": 3,
  "00001448": 3,
  "00001449": 3,
  "00001450": 3,
  "00001452": 3,
  "00001453": 3,
  "00001455": 3,
  "00001457": 3,
  "00001458": 3,
  "00001460": 3,
  "00001461": 3,
  "00001462": 3,
  "00001463": 3,
  "00001464": 3,
  "00001466": 3,
  "00001467": 3,
  "00001468": 3,
  "00001469": 4,
  "00001470": 3,
  "00001471": 3,
  "00001475": 3,
  "00001476": 3,
  "00001478": 3,
  "00001479": 4,
  "00001480": 3,
  "00001481": 3,
  "00001482": 3,
  "00001485": 3,
  "00001486": 3,
  "00001487": 3,
  "00001488": 3,
  "00001489": 3,
  "00001490": 3,
  "00001492": 3,
]
def mConcatFit_input_amounts = [
  "00000083": 97,
  "00000186": 110,
  "00000289": 178,
  "00000441": 67,
  "00000553": 67,
  "00000632": 133,
  "00000818": 67,
  "00000873": 67,
  "00001028": 67,
  "00001217": 67,
  "00001248": 178,
  "00001351": 178,
]
def mBackground_input_amounts = [
  "00000085": 2,
  "00000086": 2,
  "00000087": 2,
  "00000088": 2,
  "00000089": 2,
  "00000090": 2,
  "00000091": 2,
  "00000092": 2,
  "00000093": 2,
  "00000094": 2,
  "00000095": 2,
  "00000096": 2,
  "00000097": 2,
  "00000098": 2,
  "00000099": 2,
  "00000100": 2,
  "00000188": 2,
  "00000189": 2,
  "00000190": 2,
  "00000191": 2,
  "00000192": 2,
  "00000193": 2,
  "00000194": 2,
  "00000195": 2,
  "00000196": 2,
  "00000197": 2,
  "00000198": 2,
  "00000199": 2,
  "00000200": 2,
  "00000201": 2,
  "00000202": 2,
  "00000203": 2,
  "00000291": 2,
  "00000292": 2,
  "00000293": 2,
  "00000294": 2,
  "00000295": 2,
  "00000296": 2,
  "00000297": 2,
  "00000298": 2,
  "00000299": 2,
  "00000300": 2,
  "00000301": 2,
  "00000302": 2,
  "00000303": 2,
  "00000304": 2,
  "00000305": 2,
  "00000306": 2,
  "00000313": 5,
  "00000318": 5,
  "00000322": 5,
  "00000331": 5,
  "00000333": 5,
  "00000360": 2,
  "00000364": 2,
  "00000379": 2,
  "00000381": 2,
  "00000384": 2,
  "00000392": 2,
  "00000396": 2,
  "00000398": 2,
  "00000401": 2,
  "00000403": 2,
  "00000409": 2,
  "00000413": 2,
  "00000417": 2,
  "00000423": 2,
  "00000425": 2,
  "00000438": 2,
  "00000450": 5,
  "00000454": 5,
  "00000465": 5,
  "00000473": 5,
  "00000484": 5,
  "00000486": 5,
  "00000500": 5,
  "00000501": 5,
  "00000511": 2,
  "00000514": 2,
  "00000517": 2,
  "00000522": 2,
  "00000525": 2,
  "00000531": 2,
  "00000537": 2,
  "00000542": 2,
  "00000543": 2,
  "00000567": 2,
  "00000572": 2,
  "00000576": 2,
  "00000582": 2,
  "00000593": 2,
  "00000594": 2,
  "00000606": 2,
  "00000622": 2,
  "00000624": 2,
  "00000629": 2,
  "00000636": 2,
  "00000641": 2,
  "00000652": 2,
  "00000659": 2,
  "00000663": 2,
  "00000684": 2,
  "00000686": 2,
  "00000687": 2,
  "00000688": 2,
  "00000691": 2,
  "00000702": 2,
  "00000706": 2,
  "00000708": 2,
  "00000720": 4,
  "00000737": 2,
  "00000741": 2,
  "00000756": 2,
  "00000758": 2,
  "00000761": 2,
  "00000769": 2,
  "00000773": 2,
  "00000775": 2,
  "00000778": 2,
  "00000780": 2,
  "00000786": 2,
  "00000790": 2,
  "00000794": 2,
  "00000800": 2,
  "00000802": 2,
  "00000815": 2,
  "00000831": 2,
  "00000834": 2,
  "00000837": 2,
  "00000842": 2,
  "00000845": 2,
  "00000851": 2,
  "00000857": 2,
  "00000862": 2,
  "00000863": 2,
  "00000887": 2,
  "00000892": 2,
  "00000896": 2,
  "00000902": 2,
  "00000913": 2,
  "00000914": 2,
  "00000926": 2,
  "00000930": 4,
  "00000933": 4,
  "00000942": 4,
  "00000948": 4,
  "00000957": 4,
  "00000959": 4,
  "00000961": 4,
  "00000973": 4,
  "00000986": 2,
  "00000989": 2,
  "00000992": 2,
  "00000997": 2,
  "00001000": 2,
  "00001006": 2,
  "00001012": 2,
  "00001017": 2,
  "00001018": 2,
  "00001042": 2,
  "00001047": 2,
  "00001051": 2,
  "00001057": 2,
  "00001068": 2,
  "00001069": 2,
  "00001081": 2,
  "00001087": 2,
  "00001091": 2,
  "00001093": 2,
  "00001108": 2,
  "00001111": 2,
  "00001136": 2,
  "00001140": 2,
  "00001155": 2,
  "00001157": 2,
  "00001160": 2,
  "00001168": 2,
  "00001172": 2,
  "00001174": 2,
  "00001177": 2,
  "00001179": 2,
  "00001185": 2,
  "00001189": 2,
  "00001193": 2,
  "00001199": 2,
  "00001201": 2,
  "00001214": 2,
  "00001238": 2,
  "00001240": 2,
  "00001245": 2,
  "00001252": 2,
  "00001257": 2,
  "00001268": 2,
  "00001275": 2,
  "00001279": 2,
  "00001300": 2,
  "00001302": 2,
  "00001303": 2,
  "00001304": 2,
  "00001307": 2,
  "00001318": 2,
  "00001322": 2,
  "00001324": 2,
  "00001341": 2,
  "00001343": 2,
  "00001348": 2,
  "00001355": 2,
  "00001360": 2,
  "00001371": 2,
  "00001378": 2,
  "00001382": 2,
  "00001403": 2,
  "00001405": 2,
  "00001406": 2,
  "00001407": 2,
  "00001410": 2,
  "00001421": 2,
  "00001425": 2,
  "00001427": 2,
  "00001434": 2,
  "00001440": 2,
  "00001447": 2,
  "00001451": 2,
  "00001459": 2,
  "00001472": 2,
  "00001474": 2,
  "00001484": 2,
  "00001491": 2,
]
def mImgtbl_input_amounts = [
  "00000101": 23,
  "00000204": 25,
  "00000307": 39,
  "00000376": 17,
  "00000523": 17,
  "00000656": 30,
  "00000753": 17,
  "00000843": 17,
  "00000998": 17,
  "00001152": 17,
  "00001272": 39,
  "00001375": 39,
]
def mAdd_input_amounts = [
  "00000102": 24,
  "00000205": 26,
  "00000308": 40,
  "00000431": 18,
  "00000519": 18,
  "00000692": 31,
  "00000808": 18,
  "00000839": 18,
  "00000994": 18,
  "00001207": 18,
  "00001308": 40,
  "00001411": 40,
]
def mViewer_input_amounts = [
  "00000103": 1,
  "00000206": 1,
  "00000309": 1,
  "00000310": 12,
  "00000429": 1,
  "00000535": 1,
  "00000668": 1,
  "00000806": 1,
  "00000855": 1,
  "00001010": 1,
  "00001205": 1,
  "00001284": 1,
  "00001387": 1,
]

file_inputs = jsonSlurper.parseText(file("${projectDir}/file_inputs.json").text)
mProject_args = jsonSlurper.parseText(file("${projectDir}/mProject_args.json").text)
mDiffFit_args = jsonSlurper.parseText(file("${projectDir}/mDiffFit_args.json").text)
mConcatFit_args = jsonSlurper.parseText(file("${projectDir}/mConcatFit_args.json").text)
mBgModel_args = jsonSlurper.parseText(file("${projectDir}/mBgModel_args.json").text)
mBackground_args = jsonSlurper.parseText(file("${projectDir}/mBackground_args.json").text)
mImgtbl_args = jsonSlurper.parseText(file("${projectDir}/mImgtbl_args.json").text)
mAdd_args = jsonSlurper.parseText(file("${projectDir}/mAdd_args.json").text)
mViewer_args = jsonSlurper.parseText(file("${projectDir}/mViewer_args.json").text)


process task_mProject {
  cpus 12
  memory '18.16 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mProject_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mProject_${id} ${mProject_args.get(id).get("resources")} --out "{${mProject_args.get(id).get("out")}}" \$inputs
  """
}
process task_mDiffFit {
  cpus 1
  memory '1.71 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mDiffFit_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mDiffFit_${id} ${mDiffFit_args.get(id).get("resources")} --out "{${mDiffFit_args.get(id).get("out")}}" \$inputs
  """
}
process task_mConcatFit {
  cpus 3
  memory '6.31 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mConcatFit_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mConcatFit_${id} ${mConcatFit_args.get(id).get("resources")} --out "{${mConcatFit_args.get(id).get("out")}}" \$inputs
  """
}
process task_mBgModel {
  cpus 8
  memory '12.90 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mBgModel_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mBgModel_${id} ${mBgModel_args.get(id).get("resources")} --out "{${mBgModel_args.get(id).get("out")}}" \$inputs
  """
}
process task_mBackground {
  cpus 1
  memory '2.59 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mBackground_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mBackground_${id} ${mBackground_args.get(id).get("resources")} --out "{${mBackground_args.get(id).get("out")}}" \$inputs
  """
}
process task_mImgtbl {
  cpus 1
  memory '1.26 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mImgtbl_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mImgtbl_${id} ${mImgtbl_args.get(id).get("resources")} --out "{${mImgtbl_args.get(id).get("out")}}" \$inputs
  """
}
process task_mAdd {
  cpus 1
  memory '1.41 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mAdd_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mAdd_${id} ${mAdd_args.get(id).get("resources")} --out "{${mAdd_args.get(id).get("out")}}" \$inputs
  """
}
process task_mViewer {
  cpus 1
  memory '2.00 GB'
  input:
    tuple val( id ), path( "*" )
  output:
    path( "mViewer_????????_outfile_????*" )
  script:
  """
  inputs=\$(find . -maxdepth 1 -name \"workflow_infile_*\" -or -name \"*_outfile_0*\")
  wfbench.py mViewer_${id} ${mViewer_args.get(id).get("resources")} --out "{${mViewer_args.get(id).get("out")}}" \$inputs
  """
}
workflow {
  workflow_inputs = Channel.fromPath("${params.indir}/*")

  mProject_in = workflow_inputs.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mProject")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.groupTuple(size: 2)
  mProject_out = task_mProject(mProject_in)

  concatenated_FOR_mDiffFit = workflow_inputs.concat(mProject_out)
  mDiffFit_in = concatenated_FOR_mDiffFit.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mDiffFit")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.map { id, file -> tuple( groupKey(id, mDiffFit_input_amounts[id]), file ) }
  .groupTuple()
  mDiffFit_out = task_mDiffFit(mDiffFit_in)

  concatenated_FOR_mConcatFit = workflow_inputs.concat(mDiffFit_out)
  mConcatFit_in = concatenated_FOR_mConcatFit.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mConcatFit")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.map { id, file -> tuple( groupKey(id, mConcatFit_input_amounts[id]), file ) }
  .groupTuple()
  mConcatFit_out = task_mConcatFit(mConcatFit_in)

  concatenated_FOR_mBgModel = workflow_inputs.concat(mConcatFit_out)
  mBgModel_in = concatenated_FOR_mBgModel.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mBgModel")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.groupTuple(size: 1)
  mBgModel_out = task_mBgModel(mBgModel_in)

  concatenated_FOR_mBackground = workflow_inputs.concat(mBgModel_out, mProject_out)
  mBackground_in = concatenated_FOR_mBackground.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mBackground")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.map { id, file -> tuple( groupKey(id, mBackground_input_amounts[id]), file ) }
  .groupTuple()
  mBackground_out = task_mBackground(mBackground_in)

  concatenated_FOR_mImgtbl = workflow_inputs.concat(mBackground_out)
  mImgtbl_in = concatenated_FOR_mImgtbl.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mImgtbl")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.map { id, file -> tuple( groupKey(id, mImgtbl_input_amounts[id]), file ) }
  .groupTuple()
  mImgtbl_out = task_mImgtbl(mImgtbl_in)

  concatenated_FOR_mAdd = workflow_inputs.concat(mImgtbl_out, mBackground_out)
  mAdd_in = concatenated_FOR_mAdd.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mAdd")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.map { id, file -> tuple( groupKey(id, mAdd_input_amounts[id]), file ) }
  .groupTuple()
  mAdd_out = task_mAdd(mAdd_in)

  concatenated_FOR_mViewer = workflow_inputs.concat(mAdd_out)
  mViewer_in = concatenated_FOR_mViewer.flatten().flatMap{
    List<String> ids = extractTaskIDforFile(it, "mViewer")
    def pairs = new ArrayList()
    for (id : ids) pairs.add([id, it])
    return pairs
  }.map { id, file -> tuple( groupKey(id, mViewer_input_amounts[id]), file ) }
  .groupTuple()
  mViewer_out = task_mViewer(mViewer_in)

  println("Workflow Synthetic_Montage finished successfully.")
}
